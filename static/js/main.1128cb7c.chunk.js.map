{"version":3,"sources":["api.js","chat-reducer.js","features/chatRoom/ChatRoom.js","features/initialForm/InitialForm.js","App.js","reportWebVitals.js","index.js","features/initialForm/InitialForm.module.scss","App.module.scss","features/chatRoom/ChatRoom.module.scss"],"names":["api","socket","createConnection","this","io","transports","destroyConnection","user","disconnect","leftRoom","emit","sendClientData","userIdHandler","userId","subscribe","initMessagesHandler","newMessagesSentHandler","userTypingHandler","userStopedTypingHandler","userLeftRoomHandler","updateUsersHandler","on","sendMessage","message","error","alert","typeMessage","stopTypeMessage","initialState","id","name","room","messages","typingUsers","onlineUsers","ChatRoom","useSelector","state","chat","dispatch","useDispatch","history","useHistory","useEffect","getState","type","messagesReceived","newMessageReceived","addTypingUser","removeTypingUser","users","updateUsersList","setUserId","useState","setMessage","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","messagesAnchorRef","current","scrollIntoView","behavior","useRef","className","styles","chatWrapper","headerBlock","exitButton","onClick","push","chatBlock","onlineUsersBlock","map","onScroll","e","element","currentTarget","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","m","adminMessage","mineMessage","strangeMessage","ref","enterMessageBlock","textarea","value","onKeyDown","onKeyUp","onChange","enterButton","InitialForm","formik","useFormik","initialValues","validate","values","errors","onSubmit","payload","setUser","formBlock","handleSubmit","input","placeholder","getFieldProps","touched","errorText","button1","App","React","memo","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","u","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.1128cb7c.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n\r\nexport const api = {\r\n    socket: null,\r\n    createConnection() {\r\n        // this.socket = io(\"http://localhost:3009\", {\r\n        //     transports: [\"websocket\"],\r\n        // });\r\n        this.socket = io(\"https://back-fora-soft-test.herokuapp.com\", {\r\n            transports: [\"websocket\"],\r\n        });\r\n    },\r\n    destroyConnection(user) {\r\n        this.socket?.disconnect(user);\r\n        this.socket = null;\r\n    },\r\n    leftRoom() {\r\n        this.socket?.emit(\"client-user-Left\");\r\n    },\r\n    sendClientData(user, userIdHandler) {\r\n        this.socket?.emit(\"client-user-joined\", user, (userId) => {\r\n            userIdHandler(userId);\r\n        });\r\n    },\r\n    subscribe(\r\n        initMessagesHandler,\r\n        newMessagesSentHandler,\r\n        userTypingHandler,\r\n        userStopedTypingHandler,\r\n        userLeftRoomHandler,\r\n        updateUsersHandler\r\n    ) {\r\n        this.socket?.on(\"init-messages-published\", initMessagesHandler);\r\n        this.socket?.on(\"new-message-sent\", newMessagesSentHandler);\r\n        this.socket?.on(\"user-is-typing\", userTypingHandler);\r\n        this.socket?.on(\"user-stoped-typing\", userStopedTypingHandler);\r\n        this.socket?.on(\"user-left-room\", userLeftRoomHandler);\r\n        this.socket?.on(\"update-users\", updateUsersHandler);\r\n    },\r\n    sendMessage(message) {\r\n        this.socket?.emit(\"client-message-sent\", message, (error) => {\r\n            if (error) alert(error);\r\n        });\r\n    },\r\n    typeMessage() {\r\n        this.socket?.emit(\"client-typed\");\r\n    },\r\n    stopTypeMessage() {\r\n        this.socket?.emit(\"client-stop-typed\");\r\n    },\r\n};\r\n","import { api } from \"./api\";\r\n\r\nconst initialState = {\r\n    user: {\r\n        id: \"\",\r\n        name: \"\",\r\n        room: \"\",\r\n    },\r\n    messages: [],\r\n    typingUsers: [],\r\n    onlineUsers: [],\r\n};\r\n\r\n//reducer\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"messages-received\": {\r\n            return { ...state, messages: action.messages };\r\n        }\r\n        case \"new-message-received\": {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter(\r\n                    (u) => u.id !== action.message.user.id\r\n                ),\r\n            };\r\n        }\r\n        case \"add-typing-user\": {\r\n            return {\r\n                ...state,\r\n                typingUsers: [\r\n                    ...state.typingUsers.filter((u) => u.id !== action.user.id),\r\n                    action.user,\r\n                ],\r\n            };\r\n        }\r\n        case \"remove-typing-user\": {\r\n            return {\r\n                ...state,\r\n                typingUsers: state.typingUsers.filter(\r\n                    (u) => u.id !== action.user.id\r\n                ),\r\n            };\r\n        }\r\n        case \"delete-all-messages\": {\r\n            return { ...state, messages: [] };\r\n        }\r\n        case \"set-user\": {\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    id: action.payload.id,\r\n                    name: action.payload.name,\r\n                    room: action.payload.room,\r\n                },\r\n            };\r\n        }\r\n        case \"set-userId\": {\r\n            return { ...state, user: { ...state.user, id: action.userId } };\r\n        }\r\n        case \"remove-user\": {\r\n            return {\r\n                ...state,\r\n                user: { id: \"\", name: \"\", room: \"\" },\r\n                messages: [],\r\n                typingUsers: [],\r\n                onlineUsers: [],\r\n            };\r\n        }\r\n        case \"update-users-list\": {\r\n            return {\r\n                ...state,\r\n                onlineUsers: action.users,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//actions\r\n\r\nconst messagesReceived = (messages) => ({\r\n    type: \"messages-received\",\r\n    messages,\r\n});\r\nconst newMessageReceived = (message) => ({\r\n    type: \"new-message-received\",\r\n    message,\r\n});\r\nconst setUser = (id, name, room) => ({\r\n    type: \"set-user\",\r\n    payload: { id, name, room },\r\n});\r\nconst setUserId = (userId) => ({ type: \"set-userId\", userId });\r\nconst removeUser = () => ({ type: \"remove-user\" });\r\nconst addTypingUser = (user) => ({ type: \"add-typing-user\", user });\r\nconst removeTypingUser = (user) => ({ type: \"remove-typing-user\", user });\r\nconst deleteAllMessages = () => ({ type: \"delete-all-messages\" });\r\nconst updateUsersList = (users) => ({ type: \"update-users-list\", users });\r\n\r\n//thunks\r\n\r\nexport const createConnection = () => (dispatch, getState) => {\r\n    api.createConnection();\r\n    api.subscribe(\r\n        (messages) => {\r\n            dispatch(messagesReceived(messages));\r\n        },\r\n        (message) => {\r\n            dispatch(newMessageReceived(message));\r\n        },\r\n        (user) => {\r\n            dispatch(addTypingUser(user));\r\n        },\r\n        (user) => {\r\n            dispatch(removeTypingUser(user));\r\n        },\r\n        () => {\r\n            dispatch(deleteAllMessages());\r\n            dispatch(removeUser());\r\n        },\r\n        (users) => {\r\n            dispatch(updateUsersList(users));\r\n        }\r\n    );\r\n    let user = getState().chat.user;\r\n    api.sendClientData(user, (userId) => {\r\n        dispatch(setUserId(userId));\r\n    });\r\n};\r\n\r\nexport const setClientData = (id, name, room) => (dispatch) => {\r\n    dispatch(setUser(id, name, room));\r\n};\r\n\r\nexport const sendMessage = (message) => () => {\r\n    api.sendMessage(message);\r\n};\r\n\r\nexport const typeMessage = () => (dispatch) => {\r\n    api.typeMessage();\r\n};\r\n\r\nexport const stopTypeMessage = () => (dispatch) => {\r\n    api.stopTypeMessage();\r\n};\r\n\r\nexport const destroyConnection = (user) => (dispatch) => {\r\n    api.destroyConnection(user);\r\n    dispatch(removeUser());\r\n    dispatch(deleteAllMessages());\r\n};\r\n\r\nexport const userLeftRoom = () => (dispatch) => {\r\n    api.leftRoom();\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n    createConnection,\r\n    destroyConnection,\r\n    sendMessage,\r\n    stopTypeMessage,\r\n    typeMessage,\r\n    userLeftRoom,\r\n} from \"../../chat-reducer\";\r\nimport styles from \"./ChatRoom.module.scss\";\r\n\r\nexport const ChatRoom = () => {\r\n    const { user, messages, typingUsers, onlineUsers } = useSelector(\r\n        (state) => state.chat\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        dispatch(createConnection());\r\n        return () => {\r\n            dispatch(destroyConnection(user));\r\n        };\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true);\r\n    const [lastScrollTop, setLastScrollTop] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (isAutoScrollActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [messages, typingUsers]);\r\n\r\n    const messagesAnchorRef = useRef(null);\r\n    const styleHandler = (name) => {\r\n        if (name === \"admin\") {\r\n            return styles.adminMessage;\r\n        } else if (name === user.name) {\r\n            return styles.mineMessage;\r\n        } else {\r\n            return styles.strangeMessage;\r\n        }\r\n    };\r\n    const leftRoomHandler = () => {\r\n        dispatch(userLeftRoom());\r\n        history.push(\"/client-fora-soft-test\");\r\n    };\r\n\r\n    return (\r\n        <div className={styles.chatWrapper}>\r\n            <div className={styles.headerBlock}>\r\n                <h2>Chat page {user.room}</h2>\r\n                <button className={styles.exitButton} onClick={leftRoomHandler}>\r\n                    Exit from room\r\n                </button>\r\n            </div>\r\n            <div className={styles.chatBlock}>\r\n                <div className={styles.onlineUsersBlock}>\r\n                    {onlineUsers ? (\r\n                        onlineUsers.map((user) => {\r\n                            return <div key={user.id}>{user.name}</div>;\r\n                        })\r\n                    ) : (\r\n                        <div></div>\r\n                    )}\r\n                </div>\r\n                <div\r\n                    className={styles.messages}\r\n                    onScroll={(e) => {\r\n                        let element = e.currentTarget;\r\n                        let maxScrollPosition =\r\n                            element.scrollHeight - element.clientHeight;\r\n\r\n                        if (\r\n                            element.scrollTop > lastScrollTop &&\r\n                            Math.abs(maxScrollPosition - element.scrollTop) < 5\r\n                        ) {\r\n                            setIsAutoScrollActive(true);\r\n                        } else {\r\n                            setIsAutoScrollActive(false);\r\n                        }\r\n                        setLastScrollTop(e.currentTarget.scrollTop);\r\n                    }}\r\n                >\r\n                    {messages.map((m) => {\r\n                        return (\r\n                            <div\r\n                                key={m.id}\r\n                                className={styleHandler(m.user.name)}\r\n                            >\r\n                                <b>{m.user.name}:</b> {m.message}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {typingUsers.map((m) => {\r\n                        return (\r\n                            <div key={m.id}>\r\n                                <b>{m.name}</b> is typing...\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div ref={messagesAnchorRef} />\r\n                </div>\r\n            </div>\r\n            <div className={styles.enterMessageBlock}>\r\n                <textarea\r\n                    className={styles.textarea}\r\n                    value={message}\r\n                    onKeyDown={() => {\r\n                        dispatch(typeMessage());\r\n                    }}\r\n                    onKeyUp={() => {\r\n                        dispatch(stopTypeMessage());\r\n                    }}\r\n                    onChange={(e) => setMessage(e.currentTarget.value)}\r\n                />\r\n                <button\r\n                    className={styles.enterButton}\r\n                    onClick={() => {\r\n                        dispatch(sendMessage(message));\r\n                        setMessage(\"\");\r\n                    }}\r\n                >\r\n                    Send\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { useFormik } from \"formik\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setClientData } from \"../../chat-reducer\";\r\nimport styles from \"./InitialForm.module.scss\";\r\n\r\nexport const InitialForm = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: \"\",\r\n            room: \"\",\r\n        },\r\n        validate: (values) => {\r\n            const errors = {};\r\n            if (!values.name) {\r\n                errors.name = \"Field is required\";\r\n            }\r\n            if (!values.room) {\r\n                errors.room = \"Field is required\";\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(setClientData(\"\", values.name, values.room));\r\n            history.push(\"/client-fora-soft-test/chat-room\");\r\n        },\r\n    });\r\n\r\n    return (\r\n        // Добавить формик с валидацией\r\n        <form className={styles.formBlock} onSubmit={formik.handleSubmit}>\r\n            <h3>Websocket chat</h3>\r\n\r\n            <p>Please, enter your nickname:</p>\r\n            <input\r\n                className={styles.input}\r\n                type={\"text\"}\r\n                placeholder={\"your nickname\"}\r\n                {...formik.getFieldProps(\"name\")}\r\n            />\r\n            {!!formik.errors.name && formik.touched.name ? (\r\n                <div className={styles.errorText}>{formik.errors.name}</div>\r\n            ) : null}\r\n\r\n            <p>Please, enter room name:</p>\r\n            <input\r\n                className={styles.input}\r\n                type={\"text\"}\r\n                placeholder={\"room name\"}\r\n                {...formik.getFieldProps(\"room\")}\r\n            />\r\n            {!!formik.errors.room && formik.touched.room ? (\r\n                <div className={styles.errorText}>{formik.errors.room}</div>\r\n            ) : null}\r\n\r\n            <button className={styles.button1} type=\"submit\">\r\n                Enter\r\n            </button>\r\n        </form>\r\n    );\r\n};\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport styles from \"./App.module.scss\";\nimport { ChatRoom } from \"./features/chatRoom/ChatRoom\";\nimport { InitialForm } from \"./features/initialForm/InitialForm\";\n\nconst App = React.memo(() => {\n    return (\n        <div className={styles.App}>\n            <Switch>\n                <Route\n                    path={\"/client-fora-soft-test\"}\n                    exact\n                    render={() => <InitialForm />}\n                />\n                <Route\n                    path={\"/client-fora-soft-test/chat-room\"}\n                    render={() => <ChatRoom />}\n                />\n                <Route path={\"*\"} render={() => <div>404 NOT FOUND</div>} />\n            </Switch>\n        </div>\n    );\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { chatReducer } from \"./chat-reducer\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nlet rootReducer = combineReducers({ chat: chatReducer });\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"InitialForm_formBlock__rDqLk\",\"input\":\"InitialForm_input__2EaoX\",\"errorText\":\"InitialForm_errorText__3oVJl\",\"button1\":\"InitialForm_button1__3XYse\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16Ua0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatWrapper\":\"ChatRoom_chatWrapper__1Ac5s\",\"headerBlock\":\"ChatRoom_headerBlock__1XHYd\",\"exitButton\":\"ChatRoom_exitButton__3DrH0\",\"chatBlock\":\"ChatRoom_chatBlock__2dAOE\",\"onlineUsersBlock\":\"ChatRoom_onlineUsersBlock__1InHk\",\"messages\":\"ChatRoom_messages__kAgVk\",\"mineMessage\":\"ChatRoom_mineMessage__1Btyi\",\"strangeMessage\":\"ChatRoom_strangeMessage__32v9x\",\"adminMessage\":\"ChatRoom_adminMessage__2qZvh\",\"enterMessageBlock\":\"ChatRoom_enterMessageBlock__zQps6\",\"textarea\":\"ChatRoom_textarea__233pv\",\"enterButton\":\"ChatRoom_enterButton__anj6t\"};"],"sourceRoot":""}