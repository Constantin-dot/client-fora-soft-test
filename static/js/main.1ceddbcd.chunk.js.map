{"version":3,"sources":["features/initialForm/InitialForm.module.scss","features/chatRoom/ChatRoom.module.scss","App.module.scss","api.js","chat-reducer.js","features/chatRoom/ChatRoom.js","features/initialForm/InitialForm.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","api","socket","createConnection","this","io","transports","destroyConnection","disconnect","sendClientData","user","userIdHandler","emit","userId","subscribe","initMessagesHandler","newMessagesSentHandler","userTypingHandler","on","sendMessage","message","error","alert","typeMessage","clientDeleteAllMessages","initialState","id","name","room","messages","typingUsers","ChatRoom","useSelector","state","chat","dispatch","useDispatch","history","useHistory","useEffect","getState","type","messagesReceived","newMessageReceived","addTypingUser","setUserId","useState","setMessage","isAutoScrollActive","setIsAutoScrollActive","lastScrollTop","setLastScrollTop","messagesAnchorRef","current","scrollIntoView","behavior","useRef","className","styles","chatWrapper","chatBlock","onlineUsersBlock","map","onScroll","e","element","currentTarget","maxScrollPosition","scrollHeight","clientHeight","scrollTop","Math","abs","m","adminMessage","mineMessage","strangeMessage","ref","enterMessageBlock","elem","value","onKeyPress","onChange","button2","onClick","push","InitialForm","setName","setRoom","formBlock","input","button1","payload","setUser","setClientData","App","React","memo","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","filter","u","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ceddbcd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formBlock\":\"InitialForm_formBlock__rDqLk\",\"input\":\"InitialForm_input__2EaoX\",\"button1\":\"InitialForm_button1__3XYse\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chatWrapper\":\"ChatRoom_chatWrapper__1Ac5s\",\"chatBlock\":\"ChatRoom_chatBlock__2dAOE\",\"onlineUsersBlock\":\"ChatRoom_onlineUsersBlock__1InHk\",\"messages\":\"ChatRoom_messages__kAgVk\",\"mineMessage\":\"ChatRoom_mineMessage__1Btyi\",\"strangeMessage\":\"ChatRoom_strangeMessage__32v9x\",\"adminMessage\":\"ChatRoom_adminMessage__2qZvh\",\"enterMessageBlock\":\"ChatRoom_enterMessageBlock__zQps6\",\"elem\":\"ChatRoom_elem__3KXHm\",\"button2\":\"ChatRoom_button2__kmU0Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__16Ua0\"};","import io from \"socket.io-client\";\r\n\r\nexport const api = {\r\n    socket: null,\r\n    createConnection() {\r\n        // this.socket = io(\"http://localhost:3009\", {\r\n        //     transports: [\"websocket\"],\r\n        // });\r\n        this.socket = io(\"https://back-fora-soft-test.herokuapp.com\", {\r\n            transports: [\"websocket\"],\r\n        });\r\n    },\r\n    destroyConnection() {\r\n        this.socket?.disconnect();\r\n        this.socket = null;\r\n    },\r\n    sendClientData(user, userIdHandler) {\r\n        this.socket?.emit(\"client-user-joined\", user, (userId) => {\r\n            userIdHandler(userId);\r\n        });\r\n    },\r\n    subscribe(initMessagesHandler, newMessagesSentHandler, userTypingHandler) {\r\n        this.socket?.on(\"init-messages-published\", initMessagesHandler);\r\n        this.socket?.on(\"new-message-sent\", newMessagesSentHandler);\r\n        this.socket?.on(\"user-is-typing\", userTypingHandler);\r\n    },\r\n    sendMessage(message) {\r\n        this.socket?.emit(\"client-message-sent\", message, (error) => {\r\n            if (error) alert(error);\r\n        });\r\n    },\r\n    typeMessage() {\r\n        this.socket?.emit(\"client-typed\");\r\n    },\r\n    clientDeleteAllMessages() {\r\n        this.socket?.emit(\"client-deleted-all-messages\");\r\n    },\r\n};\r\n","import { api } from \"./api\";\r\n\r\nconst initialState = {\r\n    user: {\r\n        id: \"\",\r\n        name: \"\",\r\n        room: \"\",\r\n    },\r\n    messages: [],\r\n    typingUsers: [],\r\n};\r\n\r\nexport const chatReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case \"messages-received\": {\r\n            return { ...state, messages: action.messages };\r\n        }\r\n        case \"new-message-received\": {\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, action.message],\r\n                typingUsers: state.typingUsers.filter(\r\n                    (u) => u.id !== action.message.user.id\r\n                ),\r\n            };\r\n        }\r\n        case \"add-typing-user\": {\r\n            return {\r\n                ...state,\r\n                typingUsers: [\r\n                    ...state.typingUsers.filter((u) => u.id !== action.user.id),\r\n                    action.user,\r\n                ],\r\n            };\r\n        }\r\n        case \"delete-all-messages\": {\r\n            return { ...state, messages: [] };\r\n        }\r\n        case \"set-user\": {\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    id: action.payload.id,\r\n                    name: action.payload.name,\r\n                    room: action.payload.room,\r\n                },\r\n            };\r\n        }\r\n        case \"set-userId\": {\r\n            return { ...state, user: { ...state.user, id: action.userId } };\r\n        }\r\n        case \"remove-user\": {\r\n            return {\r\n                ...state,\r\n                user: { id: \"\", name: \"\", room: \"\" },\r\n                messages: [],\r\n                typingUsers: [],\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst messagesReceived = (messages) => ({\r\n    type: \"messages-received\",\r\n    messages,\r\n});\r\nconst newMessageReceived = (message) => ({\r\n    type: \"new-message-received\",\r\n    message,\r\n});\r\nconst setUser = (id, name, room) => ({\r\n    type: \"set-user\",\r\n    payload: { id, name, room },\r\n});\r\nconst setUserId = (userId) => ({ type: \"set-userId\", userId });\r\nconst removeUser = () => ({ type: \"remove-user\" });\r\nconst addTypingUser = (user) => ({ type: \"add-typing-user\", user });\r\nconst deleteAllMessages = () => ({ type: \"delete-all-messages\" });\r\n\r\nexport const createConnection = () => (dispatch, getState) => {\r\n    api.createConnection();\r\n    api.subscribe(\r\n        (messages) => {\r\n            dispatch(messagesReceived(messages));\r\n        },\r\n        (message) => {\r\n            dispatch(newMessageReceived(message));\r\n        },\r\n        (user) => {\r\n            dispatch(addTypingUser(user));\r\n        }\r\n    );\r\n    let user = getState().chat.user;\r\n    api.sendClientData(user, (userId) => {\r\n        dispatch(setUserId(userId));\r\n    });\r\n};\r\n\r\nexport const setClientData = (id, name, room) => (dispatch) => {\r\n    dispatch(setUser(id, name, room));\r\n};\r\n\r\nexport const sendMessage = (message) => (dispatch) => {\r\n    api.sendMessage(message);\r\n};\r\n\r\nexport const typeMessage = () => (dispatch) => {\r\n    api.typeMessage();\r\n};\r\n\r\nexport const destroyConnection = () => (dispatch) => {\r\n    api.destroyConnection();\r\n    dispatch(removeUser());\r\n};\r\n\r\nexport const clientDeleteAllMessages = () => (dispatch) => {\r\n    api.clientDeleteAllMessages();\r\n    dispatch(deleteAllMessages());\r\n};\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n    clientDeleteAllMessages,\r\n    createConnection,\r\n    destroyConnection,\r\n    sendMessage,\r\n    typeMessage,\r\n} from \"../../chat-reducer\";\r\nimport styles from \"./ChatRoom.module.scss\";\r\n\r\nexport const ChatRoom = () => {\r\n    const { user, messages, typingUsers } = useSelector((state) => state.chat);\r\n    const onlineUsers = [\r\n        { id: 1, name: \"Саша\" },\r\n        { id: 2, name: \"Маша\" },\r\n        { id: 3, name: \"Паша\" },\r\n    ];\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        dispatch(createConnection());\r\n        return () => {\r\n            dispatch(destroyConnection());\r\n        };\r\n        // eslint-disable-next-line\r\n    }, []);\r\n\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true);\r\n    const [lastScrollTop, setLastScrollTop] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (isAutoScrollActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n        // eslint-disable-next-line\r\n    }, [messages, typingUsers]);\r\n\r\n    const messagesAnchorRef = useRef(null);\r\n    const styleHandler = (name) => {\r\n        if (name === \"admin\") {\r\n            return styles.adminMessage;\r\n        } else if (name === user.name) {\r\n            return styles.mineMessage;\r\n        } else {\r\n            return styles.strangeMessage;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={styles.chatWrapper}>\r\n            <h1>Chat page {user.room}</h1>\r\n            <div className={styles.chatBlock}>\r\n                <div className={styles.onlineUsersBlock}>\r\n                    {onlineUsers.map((user) => {\r\n                        return <div key={user.id}>{user.name}</div>;\r\n                    })}\r\n                </div>\r\n                <div\r\n                    className={styles.messages}\r\n                    onScroll={(e) => {\r\n                        let element = e.currentTarget;\r\n                        let maxScrollPosition =\r\n                            element.scrollHeight - element.clientHeight;\r\n\r\n                        if (\r\n                            element.scrollTop > lastScrollTop &&\r\n                            Math.abs(maxScrollPosition - element.scrollTop) < 5\r\n                        ) {\r\n                            setIsAutoScrollActive(true);\r\n                        } else {\r\n                            setIsAutoScrollActive(false);\r\n                        }\r\n                        setLastScrollTop(e.currentTarget.scrollTop);\r\n                    }}\r\n                >\r\n                    {messages.map((m) => {\r\n                        return (\r\n                            <div\r\n                                key={m.id}\r\n                                className={styleHandler(m.user.name)}\r\n                            >\r\n                                <b>{m.user.name}:</b> {m.message}\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    {typingUsers.map((m) => {\r\n                        return (\r\n                            <div key={m.id}>\r\n                                <b>{m.name}</b> is typing...\r\n                            </div>\r\n                        );\r\n                    })}\r\n                    <div ref={messagesAnchorRef} />\r\n                </div>\r\n                <div className={styles.enterMessageBlock}>\r\n                    <textarea\r\n                        className={styles.elem}\r\n                        value={message}\r\n                        onKeyPress={() => {\r\n                            dispatch(typeMessage());\r\n                        }}\r\n                        //добавить функцию зачистки из списка печатающих\r\n                        onChange={(e) => setMessage(e.currentTarget.value)}\r\n                    />\r\n                    <button\r\n                        className={styles.button2}\r\n                        onClick={() => {\r\n                            dispatch(sendMessage(message));\r\n                            setMessage(\"\");\r\n                        }}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                    <button\r\n                        className={styles.button2}\r\n                        onClick={() => {\r\n                            dispatch(clientDeleteAllMessages());\r\n                        }}\r\n                    >\r\n                        Delete all messages\r\n                    </button>\r\n                    <button\r\n                        className={styles.button2}\r\n                        onClick={() => history.push(\"/\")} //добавить функцию выхода из комнаты и зачиски данных пользователя\r\n                    >\r\n                        Exit from room\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { setClientData } from \"../../chat-reducer\";\r\nimport styles from \"./InitialForm.module.scss\";\r\n\r\nexport const InitialForm = () => {\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [room, setRoom] = useState(\"\");\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(setClientData(\"\", name, room));\r\n        history.push(\"chat-room\");\r\n    };\r\n\r\n    return (\r\n        <div className={styles.formBlock}>\r\n            Please, enter your nickname:\r\n            <input\r\n                className={styles.input}\r\n                onChange={(e) => setName(e.currentTarget.value)}\r\n            />\r\n            Please, enter room name:\r\n            <input\r\n                className={styles.input}\r\n                onChange={(e) => setRoom(e.currentTarget.value)}\r\n            />\r\n            <button className={styles.button1} onClick={onClickHandler}>\r\n                Enter\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport styles from \"./App.module.scss\";\nimport { ChatRoom } from \"./features/chatRoom/ChatRoom\";\nimport { InitialForm } from \"./features/initialForm/InitialForm\";\n\nconst App = React.memo(() => {\n    return (\n        <div className={styles.App}>\n            <Switch>\n                <Route\n                    path={\"/client-fora-soft-test\"}\n                    exact\n                    render={() => <InitialForm />}\n                />\n                <Route path={\"/chat-room\"} render={() => <ChatRoom />} />\n                <Route path={\"*\"} render={() => <div>404 NOT FOUND</div>} />\n            </Switch>\n        </div>\n    );\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { chatReducer } from \"./chat-reducer\";\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nlet rootReducer = combineReducers({ chat: chatReducer });\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}